process TEST = { 
 
  service = DQMStore{ }	

  source = PoolSource {
     untracked vstring fileNames = { 
'/store/relval/2008/3/20/RelVal-RelValZTT-1205894772-HLT/0000/00A917AF-2EF6-DC11-B595-000423D6AF24.root',
'/store/relval/2008/3/20/RelVal-RelValZTT-1205894772-HLT/0000/3A84F1E7-2EF6-DC11-88C6-000423D9939C.root',
'/store/relval/2008/3/20/RelVal-RelValZTT-1205894772-HLT/0000/52229844-2FF6-DC11-8C3A-000423D9880C.root',
'/store/relval/2008/3/20/RelVal-RelValZTT-1205894772-HLT/0000/56C6E9E1-2EF6-DC11-B247-000423D6A6F4.root',
'/store/relval/2008/3/20/RelVal-RelValZTT-1205894772-HLT/0000/5CE82D43-2FF6-DC11-8EB7-000423D992A4.root',
'/store/relval/2008/3/20/RelVal-RelValZTT-1205894772-HLT/0000/B811FEE3-2EF6-DC11-B84A-000423D992DC.root',
'/store/relval/2008/3/20/RelVal-RelValZTT-1205894772-HLT/0000/C67899EC-2EF6-DC11-90F0-000423D6B5C4.root',
'/store/relval/2008/3/20/RelVal-RelValZTT-1205894772-HLT/0000/EA0A51AC-2EF6-DC11-80C9-000423D9853C.root'
     }
  }
  untracked PSet maxEvents = {untracked int32 input = -1}

  include "FWCore/MessageLogger/data/MessageLogger.cfi"

  # Magnetic Field
  include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"

  # Geometry
  include "Geometry/CaloEventSetup/data/CaloGeometry.cfi"
       
  include "RecoJets/JetAssociationProducers/data/ic5JetTracksAssociatorAtVertex.cfi"

  include "RecoTauTag/RecoTau/data/CaloRecoTauTagInfoProducer.cfi"
  include "RecoTauTag/RecoTau/data/CaloRecoTauProducer.cfi"
  include "RecoTauTag/RecoTau/data/CaloRecoTauDiscriminationByIsolation.cfi"
#  include "RecoTauTag/RecoTau/data/CaloRecoTauDiscriminationAgainstElectron.cfi"

  
  module caloTauTagOneProng =  CaloTauTagVal {
     InputTag ExtensionName = CaloTauValidation
     string DataType = "CALOTAU"
     string OutPutHistograms = "OneProng" 
#    string DataType = "QCD" 
     InputTag GenJetProd = iterativeCone5GenJets
     string OutPutFile = "calotautag.root" # This name is modified to reflect releaseversion and histograms stored 
     string CaloTauProducer = "caloRecoTauProducer" 
     string CaloTauDiscriminatorByIsolationProducer = "caloRecoTauDiscriminationByIsolation" 
  }

  module caloTauTagThreeProng =  CaloTauTagVal {
     InputTag ExtensionName = CaloTauValidation
     string DataType = "CALOTAU"
     string OutPutHistograms = "ThreeProng" 
#    string DataType = "QCD" 
     InputTag GenJetProd = iterativeCone5GenJets
     string OutPutFile = "calotautag.root" # This name is modified to reflect releaseversion and histograms stored 
     string CaloTauProducer = "caloRecoTauProducer" 
     string CaloTauDiscriminatorByIsolationProducer = "caloRecoTauDiscriminationByIsolation" 
  }

  module caloTauTagBothProngs =  CaloTauTagVal {
     InputTag ExtensionName = CaloTauValidation
     string DataType = "CALOTAU"
     string OutPutHistograms = "OneProngAndThreeProng" 
#    string DataType = "QCD" 
     InputTag GenJetProd = iterativeCone5GenJets
     string OutPutFile = "calotautag.root" # This name is modified to reflect releaseversion and histograms stored 
     string CaloTauProducer = "caloRecoTauProducer" 
     string CaloTauDiscriminatorByIsolationProducer = "caloRecoTauDiscriminationByIsolation" 
  }

  #module execution use first line for Z->TauTau sample and the second for QCD sample changing accordingly the DataType on the PFTauTagVal module above
  path p={caloTauTagOneProng,caloTauTagThreeProng,caloTauTagBothProngs}
}

  # * possible metrics : "DR", "angle", "area";
  #   if the "area" metric is chosen, AreaMetric_recoElements_maxabsEta parameter is considered, the area of a cone is increased by increasing the angle of the cone;  
  #   functionnality to use a "DR" signal cone and an "area" isolation outer cone is not available;
  

  # ** may depend on E(energy) and/or ET(transverse energy) of the initial PFJet, ex. : "3.0/E";   
